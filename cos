#!/bin/bash

set -e

script=
name=
binary=
arch=

initialize()
{
    case ${arch} in
        x86_64 )
            ;;
        i386 )
            ;;
        * )
            echo "Unsupported architecture"
            exit 1
    esac

    echo "[cos setting arch] make -C src config-${arch}"
    make -C src config-${arch} 

    echo "[cos executing] make -C src config init"
    make -C src init
}

build()
{
    if ! [ -r "src/.PLATFORM_ID" ]; then
        echo "Must \"cos init\" before \"cos build\"."
        exit 1
    fi

    echo "[cos executing] make -C src all"
    make -C src all
}

clean()
{
    echo "[cos executing] make -C src clean"
    make -C src distclean
}

compose()
{
    if [ -z "$script" ] || [ -z "$name" ]; then
	    usage
    fi

    if ! [ -e "src/composer/target/debug/compose" ]; then
        echo "Must \"cos build\" before composition. Could not find src/composer/target/debug/compose"
        exit 1
    fi

    echo "[cos executing] src/composer/target/debug/compose $script $name"
    src/composer/target/debug/compose $script $name

    echo ""
    echo "[cos generating ISO image]"
    local dir="system_binaries/cos_build-${name}"

    #detect grub-mkrescue/grub2-mkrescue
    set +e
    grub=$(command -v grub-mkrescue)
    grub2=$(command -v grub2-mkrescue)
    set -e
    local grub_command=""
    if [ "${grub}" != "" ]
    then
        grub_command="grub-mkrescue"
    elif [ "${grub2}" != "" ]
    then
        grub_command="grub2-mkrescue"
    else
        echo "Cannot find grub-mkrescue/grub2-mkrescue to generate ISO image."
        exit 1
    fi

    cd ${dir}
    echo "set timeout=0" > grub.cfg
    echo "set default=0" >> grub.cfg
    echo "menuentry "kernel" {" >> grub.cfg
    echo "  multiboot2 /boot/cos.img" >> grub.cfg
    echo "}" >> grub.cfg

    mkdir -p iso/boot/grub
    cp grub.cfg iso/boot/grub/
    cp cos.img iso/boot/
    ${grub_command} -d /usr/lib/grub/i386-pc -o ${name}.iso iso

    #clean files
    rm -rf iso grub.cfg

    echo "Successfully generate ISO image: ${dir}/${name}.iso"
}

run()
{
    local dir="./system_binaries/cos_build-${name}"  
    if [ ! -f ${dir}/${name}.iso ]
    then
        echo "Cannot find ${name}.iso, please do compose first and check its name"
        exit 1
    fi

    local elf_type=$(readelf -h ${dir}/cos.img | grep "Class:" | awk '{print $2}')
    local kvm_flag=""

    if [ -e "/dev/kvm" ] && [ -r "/dev/kvm" ] && [ -w "/dev/kvm" ]; then
        kvm_flag="-enable-kvm"
    fi

    if [ "${elf_type}" == "ELF64" ]
    then
        qemu-system-x86_64 ${kvm_flag} -cpu max -m 1024 -cdrom ${dir}/${name}.iso -no-reboot -nographic -s
    elif [ "${elf_type}" == "ELF32" ]
    then
        qemu-system-i386 ${kvm_flag} -cpu max -m 1024 -cdrom ${dir}/${name}.iso -no-reboot -nographic -s
    else
        echo "Unsupported image type!"
    fi
}

debug_run()
{
    local dir="system_binaries/cos_build-${name}"
    local gdbinit="system_binaries/gdbinit"

    if [ ! -f ${dir}/${name}.iso ]
    then
        echo "Cannot find ${name}.iso, please do compose first and check its name"
        exit 1
    fi

    if [ ! -f ${gdbinit} ]
    then
        echo "set confirm off" > ${gdbinit}
        echo "#file ${dir}/global.booter/no_interface.llbooter.global.booter" >> ${gdbinit}
        echo "file ${dir}/cos.img" >> ${gdbinit}
        echo "target remote:1234" >> ${gdbinit}
    fi

    local elf_type=$(readelf -h ${dir}/cos.img | grep "Class:" | awk '{print $2}')

    if [ "${elf_type}" == "ELF64" ]
    then
        qemu-system-x86_64 -cpu max -m 1024 -cdrom ${dir}/${name}.iso -no-reboot -nographic -s -S
    elif [ "${elf_type}" == "ELF32" ]
    then
        qemu-system-i386 -cpu max -m 1024 -cdrom ${dir}/${name}.iso -no-reboot -nographic -s -S
    else
        echo "Unsupported image type!"
    fi
}

gdb()
{
    cd system_binaries
    command gdb -x ./gdbinit
}

usage()
{
    echo "Usage: " $0 " init <arch: [x86_64|i386]>|build|clean|compose <script> <output name>|run <composite name>|debug_run <composite name>|gdb"
    exit 1
}

case $1 in
    init )
        arch=$2
        initialize
        ;;
    build )
        build
        ;;
    clean )
        clean
        ;;
    compose )
        script=$2
        name=$3
        compose
        ;;
    run )
        binary=$2
        name=$2
        run
        ;;
    debug_run )
        name=$2
        debug_run
        ;;
    gdb )
        gdb
        ;;
    * )
        usage
esac
