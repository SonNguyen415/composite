#!/bin/bash

script=
name=
binary=

build()
{
    if ! [ -r "src/.PLATFORM_ID" ]; then
	echo "Must \"cos init\" before \"cos build\"."
	exit 2
    fi

    echo "[cos executing] make -C src all"
    make -C src all
}

clean()
{
    echo "[cos executing] make -C clean"
    make -C src clean
}

distclean()
{
    echo "[cos executing] make -C distclean"
    make -C src distclean
}

initialize()
{
    echo "[cos executing] make -C src config init"
    make -C src config init
}

usage()
{
    echo "Usage: " $0 " init|build|reset|distclean|compose <script> <output name>|run <binary>"
    exit 2
}

compose()
{
    if [ -z "$script" ] || [ -z "$name" ]; then
	usage
    fi
    if ! [ -e "src/composer/target/debug/compose" ]; then
	echo "Must \"cos build\" before composition. Could not find src/composer/target/debug/compose"
	exit 2
    fi
    echo "[cos executing] src/composer/target/debug/compose $script $name"
    src/composer/target/debug/compose $script $name
}

run()
{
    local dir=$(dirname ${binary})  
    local binary_name=$(basename ${binary})
    local cur_dir=$(pwd)
    local elf_type=$(readelf -h ${binary} | grep "Class:" | awk '{print $2}')

    if [ "${elf_type}" == "ELF64" ]
    then
        #create grub.cfg 
        cd ${dir}
        echo "set timeout=0" > grub.cfg
        echo "set default=0" >> grub.cfg
        echo "menuentry "kernel" {" >> grub.cfg
        echo "  multiboot2 /boot/${binary_name}" >> grub.cfg
        echo "}" >> grub.cfg

        mkdir -p iso/boot/grub
        cp grub.cfg iso/boot/grub/
        cp ${binary_name} iso/boot/
        grub-mkrescue -o kernel.iso iso

        qemu-system-x86_64 -cpu max -m 8192 -cdrom kernel.iso -no-reboot -nographic -s
    elif [ "${elf_type}" == "ELF32" ]
    then
        echo "[cos executing] tools/run.sh $binary"
        tools/run.sh $binary
    else
        echo "unsupported image type!"
    fi
}

case $1 in
    init )    initialize
	      ;;
    build )   build
	      ;;
    reset )   clean
	      ;;
    distclean ) distclean
          ;;
    compose ) script=$2
	      name=$3
	      compose
	      ;;
    run )     binary=$2
	      run
	      ;;
    * )       usage
esac
